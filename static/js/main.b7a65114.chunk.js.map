{"version":3,"sources":["components/Filter.js","components/Joke.js","App.js","reportWebVitals.js","index.js"],"names":["Filter","setSearchComponent","setCategories","setParams","setHasParams","setLanguage","language","params","setConcat","categories","handleSearchComponent","useState","length","hasCategories","setHasCategories","useEffect","pills","document","querySelectorAll","forEach","p","addEventListener","classList","toggle","contains","querySelector","style","cssText","pillListener","pillsFlag","lang","map","c","textContent","add","l","value","substring","outerHTML","fillPills","className","onClick","name","id","disabled","parameters","push","apiParameters","Joke","displayJoke","setDisplayJoke","joke","setJoke","isLoading","setLoading","displaySearchComponent","hasParams","concat","fetchJokes","a","fetch","join","toLowerCase","headers","response","json","data","ok","rel","href","target","additionalInfo","setup","delivery","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2SAyLeA,EAtLA,SAAC,GAE6B,IAF3BC,EAE0B,EAF1BA,mBAAoBC,EAEM,EAFNA,cAAeC,EAET,EAFSA,UACrCC,EAC4B,EAD5BA,aAAcC,EACc,EADdA,YAAaC,EACC,EADDA,SAAUC,EACT,EADSA,OACrCC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WAGjBC,EAAwB,kBAAMT,GAAmB,IAIvD,EAAwCU,mBAASF,EAAWG,QAA5D,mBAAKC,EAAL,KAAoBC,EAApB,KAwHA,OAVAC,qBAAU,YA3GW,WACjB,IAAMC,EAAQC,SAASC,iBAAiB,SACtBD,SAASC,iBAAiB,cAElCC,SAAQ,SAAAC,GACdA,EAAEC,iBAAiB,SAAS,WACxBD,EAAEE,UAAUC,OAAO,gBAI3BP,EAAMG,SAAQ,SAAAC,GACVA,EAAEC,iBAAiB,SAAS,WACxBD,EAAEE,UAAUC,OAAO,UAGdH,EAAEE,UAAUE,SAAS,UAGtBV,IAAmBD,GAFnBC,IAAmBD,GAKLI,SAASQ,cAAc,qBAE3BC,MAAMC,QADC,IAAlBd,EAC2B,4BAEA,qCAoFtCe,GA3Ec,WAEd,IAAMZ,EAAQC,SAASC,iBAAiB,SAClCW,EAAYZ,SAASC,iBAAiB,cACtCY,EAAOb,SAASC,iBAAiB,qBAGvCF,EAAMG,SAAQ,SAAAC,GACVX,EAAWsB,KAAI,SAAAC,GAIX,OAHGZ,EAAEa,cAAgBD,GACjBZ,EAAEE,UAAUY,IAAI,UAEb,SAKfL,EAAUV,SAAQ,SAAAC,GACdb,EAAOwB,KAAI,SAAAC,GAIP,OAHGZ,EAAEa,cAAgBD,GACjBZ,EAAEE,UAAUY,IAAI,UAEb,SAKfJ,EAAKX,SAAQ,SAAAgB,GACLA,EAAEC,QAAU9B,EAAS+B,UAAU,EAAG,KAClCF,EAAEG,UAAF,yBAAgCH,EAAEC,MAAlC,sBAAqDD,EAAEF,YAAvD,iBAiDRM,KAGD,IAGC,qBAAKC,UAAU,YAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,qBAAKA,UAAU,QAAQC,QAAS/B,EAAhC,iBACA,sBAAK8B,UAAU,UAAf,UAEI,0CACA,yBAAQE,KAAK,YAAYC,GAAG,YAA5B,UACI,wBAAQP,MAAM,GAAd,qBACA,wBAAQA,MAAM,KAAd,qBACA,wBAAQA,MAAM,KAAd,oBACA,wBAAQA,MAAM,KAAd,wBACA,wBAAQA,MAAM,KAAd,oBACA,wBAAQA,MAAM,KAAd,sBAIJ,4CACA,sBAAKI,UAAU,aAAf,UACI,wBAAQA,UAAU,OAAlB,yBACA,wBAAQA,UAAU,OAAlB,2BACA,wBAAQA,UAAU,OAAlB,kBACA,wBAAQA,UAAU,OAAlB,iBACA,wBAAQA,UAAU,OAAlB,oBACA,wBAAQA,UAAU,OAAlB,0BAGgB,IAAlB3B,GACE,oBAAI2B,UAAU,gBAAd,oDAGJ,sDACA,sBAAKA,UAAU,QAAf,UACI,wBAAQA,UAAU,YAAlB,kBACA,wBAAQA,UAAU,YAAlB,uBACA,wBAAQA,UAAU,YAAlB,uBACA,wBAAQA,UAAU,YAAlB,oBACA,wBAAQA,UAAU,YAAlB,oBACA,wBAAQA,UAAU,YAAlB,yBAGJ,wBAAQG,GAAG,kBAAkBC,SAA4B,IAAlB/B,EAAqB4B,QAAS,WACA5B,EAAgB,KA3F/E,WAGlB,IAAIJ,EAAa,GACboC,EAAa,GACbvC,EAAWW,SAASQ,cAAc,cAAcW,MAG9CpB,EAAQC,SAASC,iBAAiB,gBAClCW,EAAYZ,SAASC,iBAAiB,qBAG5CF,EAAMG,SAAQ,SAAAC,GAAC,OAAIX,EAAWqC,KAAK1B,EAAEa,gBACrCJ,EAAUV,SAAQ,SAACC,GAAD,OAAOyB,EAAWC,KAAK1B,EAAEa,gBAG3C/B,EAAcO,GAGXoC,EAAWjC,OAAS,GACnBR,EAAa,mBACbD,EAAU0C,GACVrC,EAAU,OAIVJ,EAAa,IACbD,EAAU,IACVK,EAAU,KAKVH,EADY,KAAbC,EACa,QAAUA,EAAW,IAGrB,IAwD4DyC,GACArC,MAHhE,kCC1DLsC,EA9GF,WAGT,MAAsCrC,oBAAS,GAA/C,mBAAOsC,EAAP,KAAoBC,EAApB,KACA,EAAwBvC,mBAAS,IAAjC,mBAAOwC,EAAP,KAAaC,EAAb,KACA,EAAgCzC,oBAAS,GAAzC,mBAAO0C,EAAP,KAAkBC,EAAlB,KACA,EAAqD3C,oBAAS,GAA9D,mBAAO4C,EAAP,KAA+BtD,EAA/B,KAGA,EAAgCU,mBAAS,IAAzC,mBAAOL,EAAP,KAAiBD,EAAjB,KACA,EAAoCM,mBAChC,CACI,cACA,gBACA,OACA,MACA,SACA,cAPR,mBAAOF,EAAP,KAAmBP,EAAnB,KAUA,EAA4BS,mBAAS,IAArC,mBAAOJ,EAAP,KAAeJ,EAAf,KAGA,EAAkCQ,mBAAS,IAA3C,mBAAO6C,EAAP,KAAkBpD,EAAlB,KACA,EAA4BO,mBAAS,IAArC,mBAAO8C,EAAP,KAAejD,EAAf,KAMMkD,EAAU,uCAAG,8BAAAC,EAAA,6DACfL,GAAW,GACXJ,GAAe,GAFA,SAIQU,MALjB,+BAK6BnD,EAAWoD,KAAK,KAAO,IAAMvD,EAAWkD,EAC/DjD,EAAOsD,KAAK,KAAKC,cAAgBL,EAAS,eAC1C,CACIM,QAAU,CAAC,eAAiB,qCAP7B,cAITC,EAJS,gBAUIA,EAASC,OAVb,cAUTC,EAVS,OAYZF,EAASG,IACRf,EAAQc,GAEZZ,GAAW,GAfI,kBAiBRU,GAjBQ,4CAAH,qDAoBhB,OACI,gCACI,sBAAKxB,UAAU,UAAf,UACI,wBAAQG,GAAG,UAAUC,SAAUW,EAAwBd,QAASiB,EAAhE,6BACA,wBAAQf,GAAG,aAAaC,SAAUW,EAAwBd,QA3BhD,WAAOxC,GAAmB,GAAOiD,GAAe,SA8B7DK,GACG,cAAC,EAAD,CACItD,mBAAoBA,EACpBC,cAAeA,EACfE,aAAcA,EACdD,UAAWA,EACXI,OAAQA,EACRE,WAAYA,EACZJ,YAAaA,EACbC,SAAUA,EACVE,UAAWA,IAIlByC,GACG,sBAAKT,UAAU,iBAAf,UAEI,qBAAKA,UAAU,UAAf,SACI,mDACI,mBACI4B,IAAI,aACJC,KAAK,sBACLC,OAAO,SAHX,2BASNjB,EAeE,oBAAIb,UAAU,UAAd,8BAdA,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,QAAf,UACI,6BAAKW,EAAKoB,iBACV,6BAAKpB,EAAKqB,WAGd,qBAAKhC,UAAU,WAAf,SACI,6BAAKW,EAAKsB,uBCpF3BC,MATf,WACE,OACM,sBAAKlC,UAAU,aAAf,UACE,oBAAIA,UAAU,aAAd,kIACA,cAAC,EAAD,QCGKmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrE,SAASsE,eAAe,SAM1BZ,M","file":"static/js/main.b7a65114.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport \"./Filter.css\";\n\nconst Filter = ({ setSearchComponent, setCategories, setParams, \n                setHasParams, setLanguage, language, params, \n                setConcat, categories }) => {\n\n    // hide filter component\n    const handleSearchComponent = () => setSearchComponent(false);\n\n    // keep track of how many categories are currently active. If 0, render\n    // visual error. (See pillListener function --line 30--)\n    let [hasCategories, setHasCategories] = useState(categories.length);\n\n    // listen to what filters the user clicks.\n    const pillListener = () =>{\n        const pills = document.querySelectorAll('.pill');\n        const pillsFlag = document.querySelectorAll('.pill-flag');\n\n        pillsFlag.forEach(p =>{\n            p.addEventListener('click', () =>{\n                p.classList.toggle('active');\n            })\n        });\n\n        pills.forEach(p => {\n            p.addEventListener('click', () => {\n                p.classList.toggle('active');\n\n                // set num of categories active.. if zero render error message\n                if (!p.classList.contains('active'))\n                    setHasCategories(--hasCategories);\n                else\n                    setHasCategories(++hasCategories);\n\n                // handle user error based on categories selected. \n                const container = document.querySelector('.filter-container');\n                if(hasCategories === 0)\n                    container.style.cssText = \"border: solid salmon 2px;\";\n                else\n                    container.style.cssText = \"border: solid #c6c6c685 2px;\";\n                \n            });\n        });\n    }\n\n    \n    // add class 'active' to pills based on what filters are currently \n    // activated. \n    const fillPills = () =>{\n\n        const pills = document.querySelectorAll('.pill');\n        const pillsFlag = document.querySelectorAll('.pill-flag');\n        const lang = document.querySelectorAll('#languages option');\n\n        // category buttons\n        pills.forEach(p =>{\n            categories.map(c => {\n                if(p.textContent === c)\n                    p.classList.add('active');\n        \n                return '';\n            });\n        });\n\n        // parameters buttons\n        pillsFlag.forEach(p =>{\n            params.map(c =>{\n                if(p.textContent === c)\n                    p.classList.add('active')\n\n                return ''; \n            });\n        });\n\n\n        lang.forEach(l => {\n            if (l.value === language.substring(5, 7)){\n                l.outerHTML = `<option value=\"${l.value}\" selected>${l.textContent}</option>`;\n            }\n        });\n    }   \n\n    const apiParameters = () =>{\n\n        // hold api parameter data\n        let categories = [];\n        let parameters = [];\n        let language = document.querySelector('#languages').value;\n        \n        // get all individual pill buttons\n        const pills = document.querySelectorAll('.pill.active');\n        const pillsFlag = document.querySelectorAll('.pill-flag.active');\n\n        // add whatever buttons are active to the array for fetching.\n        pills.forEach(p => categories.push(p.textContent));\n        pillsFlag.forEach((p) => parameters.push(p.textContent));\n\n        // set parent's states based on user input filter. \n        setCategories(categories);\n\n        // if the user specified blacklist parameters, add them to API call.\n        if(parameters.length > 0){\n            setHasParams(\"blacklistFlags=\");\n            setParams(parameters);\n            setConcat(\"&\");\n        }\n        // otherwise pass an empty string\n        else{\n            setHasParams(\"\");\n            setParams([]);\n            setConcat(\"\");\n        }\n\n        // did user specify a language -- pass it if yes \n        if(language !== \"\")\n            setLanguage(\"lang=\" + language + \"&\");\n        // otherwise set an empty string to the API call.\n        else   \n            setLanguage(\"\");\n    }\n\n    useEffect(() =>{\n        // set up pill button click event listeners\n        pillListener();\n\n        // fill pill buttons based on current filter options.\n        fillPills();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <div className=\"filter-container\">\n                <div className=\"close\" onClick={handleSearchComponent}> x </div>\n                <div className=\"filters\">\n\n                    <h6>Language</h6>\n                    <select name=\"languages\" id=\"languages\">\n                        <option value=\"\">English</option>\n                        <option value=\"es\">Spanish</option>\n                        <option value=\"fr\">French</option>\n                        <option value=\"pt\">Portuguese</option>\n                        <option value=\"de\">German</option>\n                        <option value=\"cs\">Czech</option>\n                    </select>\n\n\n                    <h6>Categories</h6>\n                    <div className=\"categories\">    \n                        <button className=\"pill\">Programming</button>\n                        <button className=\"pill\">Miscellaneous</button>\n                        <button className=\"pill\">Dark</button>\n                        <button className=\"pill\">Pun</button>\n                        <button className=\"pill\">Spooky</button>\n                        <button className=\"pill\">Christmas</button>\n                    </div>\n\n                    {(hasCategories === 0) &&\n                        <h6 className=\"error-message\">You must select at least one category.</h6>\n                    }\n\n                    <h6>Flags [To Blacklist]</h6>\n                    <div className=\"flags\">\n                        <button className=\"pill-flag\">NSFW</button>\n                        <button className=\"pill-flag\">Religious</button>\n                        <button className=\"pill-flag\">Political</button>\n                        <button className=\"pill-flag\">Racist</button>\n                        <button className=\"pill-flag\">Sexist</button>\n                        <button className=\"pill-flag\">Explicit</button>\n                    </div>\n\n                    <button id=\"getFilteredJoke\" disabled={hasCategories === 0} onClick={() => \n                                                                                    { if(hasCategories > 0 ) {\n                                                                                    apiParameters(); \n                                                                                    handleSearchComponent();\n                                                                                    } \n                                                                                }}>Save Filter</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Filter;","import React, { useState } from 'react';\nimport \"./Joke.css\";\nimport Filter from \"./Filter\";\n\n// Joke Component\nconst Joke = () => {\n\n    // states\n    const [displayJoke, setDisplayJoke] = useState(false);\n    const [joke, setJoke] = useState([]);\n    const [isLoading, setLoading] = useState(true);\n    const [displaySearchComponent, setSearchComponent] = useState(false);\n\n    // api parameters\n    const [language, setLanguage] = useState(\"\");\n    const [categories, setCategories] = useState(\n        [\n            'Programming',\n            'Miscellaneous',\n            'Dark',\n            'Pun',\n            'Spooky',\n            'Christmas'\n        ]\n    );\n    const [params, setParams] = useState([]);\n    \n    // did the user specify parameters? \n    const [hasParams, setHasParams] = useState(\"\");\n    const [concat, setConcat] = useState(\"\");\n\n    // display filter component\n    const displaySearch = () => {setSearchComponent(true); setDisplayJoke(false)};\n\n    let api = \"https://v2.jokeapi.dev/joke/\";\n    const fetchJokes = async () =>{\n        setLoading(true);\n        setDisplayJoke(true);\n\n        const response = await fetch(api + categories.join(',') + \"?\" + language + hasParams + \n                    params.join(',').toLowerCase() + concat + \"type=twopart\", \n                    { \n                        headers : {'Content-type' : 'application/json; charset=UTF-8'}\n                    });\n\n        const data = await response.json();\n\n        if(response.ok)\n            setJoke(data);\n\n        setLoading(false);\n        \n        return response;\n    }\n\n    return (\n        <div>\n            <div className=\"buttons\">\n                <button id=\"getJoke\" disabled={displaySearchComponent} onClick={fetchJokes}>Get Random Joke</button>\n                <button id=\"searchJoke\" disabled={displaySearchComponent} onClick={displaySearch}></button>\n            </div>\n\n            {displaySearchComponent &&\n                <Filter\n                    setSearchComponent={setSearchComponent}\n                    setCategories={setCategories}\n                    setHasParams={setHasParams}\n                    setParams={setParams}\n                    params={params}\n                    categories={categories}\n                    setLanguage={setLanguage}\n                    language={language}\n                    setConcat={setConcat}\n                />\n            }\n\n            {displayJoke &&\n                <div className=\"joke-container\">\n\n                    <div className=\"credits\">\n                        <h6>Jokes provided by\n                            <a\n                                rel=\"noreferrer\"\n                                href=\"https://jokeapi.dev\"\n                                target=\"_blank\"\n                            > JokeAPI\n                            </a>\n                        </h6>\n                    </div>\n\n                    {!isLoading ? \n                        <div className=\"joke\">\n                            <div className=\"setup\">\n                                <h1>{joke.additionalInfo}</h1>\n                                <h1>{joke.setup}</h1>\n                            </div>\n\n                            <div className=\"delivery\">\n                                <h1>{joke.delivery}</h1>\n                            </div>\n                        </div>\n\n                        :\n                        \n                        \n                        <h1 className=\"loading\">Fetching Joke...</h1>\n                    }    \n                </div>  \n            }\n        </div>\n    );\n\n   \n};\n\nexport default Joke;","import React from \"react\";\nimport './App.css';\n\nimport Joke from './components/Joke';\n\nfunction App() {\n  return(\n        <div className=\"app-header\">\n          <h6 className=\"disclaimer\">Disclaimer: Retrieving random jokes may contain offensive/NSFW content. Use the search button to filter out content.</h6>\n          <Joke/>\n        </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}